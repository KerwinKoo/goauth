// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/KerwinKoo/goauth/design
// --out=$(GOPATH)/src/github.com/KerwinKoo/goauth
// --version=v1.1.0
//
// API "goauth": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
)

// AnswerPingPingContext provides the ping AnswerPing action context.
type AnswerPingPingContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Args string
}

// NewAnswerPingPingContext parses the incoming request URL and body, performs validations and creates the
// context used by the ping controller AnswerPing action.
func NewAnswerPingPingContext(ctx context.Context, service *goa.Service) (*AnswerPingPingContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := AnswerPingPingContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramArgs := req.Params["args"]
	if len(paramArgs) > 0 {
		rawArgs := paramArgs[0]
		rctx.Args = rawArgs
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AnswerPingPingContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}
