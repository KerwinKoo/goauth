// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/KerwinKoo/goauth/design
// --out=$(GOPATH)/src/github.com/KerwinKoo/goauth
// --version=v1.1.0
//
// API "goauth": Application Controllers
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// PingController is the controller interface for the Ping actions.
type PingController interface {
	goa.Muxer
	AnswerPing(*AnswerPingPingContext) error
}

// MountPingController "mounts" a Ping resource controller on the given service.
func MountPingController(service *goa.Service, ctrl PingController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAnswerPingPingContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.AnswerPing(rctx)
	}
	service.Mux.Handle("GET", "/wifidog/ping/:args", ctrl.MuxHandler("AnswerPing", h, nil))
	service.LogInfo("mount", "ctrl", "Ping", "action", "AnswerPing", "route", "GET /wifidog/ping/:args")
}
